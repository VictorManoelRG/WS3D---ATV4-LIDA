/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //implementation 'com.github.CognitiveComputingResearchGroup:lida-framework:v1.2b'
    implementation ':lida-framework:v1.2b'
    implementation 'com.github.CST-Group:WS3DProxy:0.0.4'
    implementation ':collections-generic:4.01'  
    implementation ':colt:1.2.0'
    implementation ':concurrent:1.3.4'
    implementation ':java-json:'
    implementation ':jcommon:1.0.16'
    implementation ':jfreechart:1.0.13'
    implementation ':jung-algorithms:2.0.1'
    implementation ':jung-jai:2.0.1'
    implementation ':jung-api:2.0.1'
    implementation ':jung-jai-samples:2.0.1'
    implementation ':jung-3d:2.0.1'
    implementation ':jung-graph-impl:2.0.1'
    implementation ':jung-samples:2.0.1'
    implementation ':jung-3d-demos:2.0.1'
    implementation ':jung-io:2.0.1'
    implementation ':jung-visualization:2.0.1'
    implementation ':stax-api:1.0.1'
    implementation ':wstx-asl:3.2.6'
    implementation ':vecmath:1.3.1'
  
    // Use JUnit Jupiter for testing.
    //testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'Run'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier = 'full'
    manifest {
      attributes(
        'Main-Class': application.mainClass.get()
      )
    }
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
